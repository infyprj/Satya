import { Component, OnInit, AfterViewInit, ElementRef } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { IProduct } from '../interfaces/product';
import { ISavedProduct } from '../interfaces/saved-product';
import { ProductService } from '../services/product-service/product.service';
import { ICartItem } from '../interfaces/cart';
import { CartService } from '../services/cart-service/cart.service';
import { IReview } from '../interfaces/reviews';

interface ProductImage {
  imageId: number;
  productId: number;
  imageUrl: string;
}

@Component({
  selector: 'app-product-detail',
  templateUrl: './product-detail.component.html',
  styleUrls: ['./product-detail.component.css']
})
export class ProductDetailComponent implements OnInit {
  product: IProduct | undefined;
  productImages: ProductImage[] = [];
  loading: boolean = true;
  errorMsg: string = '';
  activeImageUrl: string = '';
  quantity: number = 1;
  productId: number = 0;
  is3DViewActive = false;
  modelUrl = "https://modelviewer.dev/shared-assets/models/Astronaut.glb"; // Default model URL
  showToast = false;
  toastMessage = "";
  toastStatus = 0; // 0 = already added (orange), 1 = successfully added (green)
  userId: number = 0;
  userRoleId: number = 0;
  reviews: (IReview & { showMenu?: boolean })[] = [];
  showReviews: boolean = true;
  currentUserID: number = parseInt(<string>sessionStorage.getItem('userId'));

  // New properties for review editing
  editingReviewId: number | null = null;
  updatedReviewDescription: string = '';

  constructor(
    private route: ActivatedRoute,
    private router: Router,
    private _productService: ProductService,
    private _cartSerive: CartService,
    private elementRef: ElementRef,
  ) { }

  ngOnInit(): void {
    this.productId = +this.route.snapshot.params['id'];

    if (this.productId) {
      this.getProductDetails(this.productId);
      this.getProductImages(this.productId);
      this.loadReviews();  // load reviews for this.productId
    } else {
      this.errorMsg = 'Invalid product ID';
      this.loading = false;
    }
  }

  ngAfterViewInit() {
    this.loadModelViewerScript();
  }

  loadModelViewerScript() {
    const script = document.createElement("script");
    script.type = "module";
    script.src = "https://ajax.googleapis.com/ajax/libs/model-viewer/3.3.0/model-viewer.min.js";
    document.body.appendChild(script);
  }

  getProductDetails(id: number) {
    console.log("Fetching product details for ID:", id);
    this._productService.getProductById(id).subscribe(
      responseProductData => {
        console.log("Product data received:", responseProductData);
        this.product = responseProductData;
        if (this.product) {
          this.activeImageUrl = this.product.thumbnailUrl;
          this.modelUrl = this.product.modelUrl || this.modelUrl;
        }
        this.loading = false;
      },
      responseProductError => {
        this.errorMsg = responseProductError;
        this.loading = false;
        console.error("Error fetching product:", this.errorMsg);
      },
      () => { console.log('GetProductDetails method executed successfully'); }
    );
  }

  getProductImages(id: number) {
    console.log("Fetching product images for ID:", id);
    this._productService.getProductImages(id).subscribe(
      (responseImagesData: any) => {
        console.log("Product images received:", responseImagesData);
        this.productImages = responseImagesData;
      },
      responseImagesError => {
        this.errorMsg = responseImagesError;
        console.error("Error fetching images:", this.errorMsg);
      },
      () => { console.log('GetProductImages method executed successfully'); }
    );
  }

  loadReviews(): void {
    this._productService.getProductReviews(this.productId).subscribe(
      (reviews: IReview[]) => {
        this.reviews = reviews
          .filter(r => r.isVisible)
          .map(review => ({
            ...review,
            showMenu: false
          }));
      },
      error => {
        console.error('Error fetching reviews:', error);
      }
    );
  }

  toggleMenu(reviewID: number): void {
    const review = this.reviews.find(r => r.reviewID === reviewID);
    if (review) {
      review.showMenu = !review.showMenu;
    }
  }

  deleteReview(reviewID: number): void {
    const review = this.reviews.find(r => r.reviewID === reviewID);
    if (review) {
      review.isVisible = false; // Soft delete

      this._productService.updateReview(review).subscribe(
        () => {
          this.showToastMessage("Review deleted successfully", 1);
          this.reviews = this.reviews.filter(r => r.reviewID !== reviewID);
        },
        error => {
          console.error('Error deleting review:', error);
        }
      );
    }
  }

  // New: open the edit review modal
  openEditReviewModal(review: IReview) {
    this.editingReviewId = review.reviewID;
    this.updatedReviewDescription = review.description;
  }

  // New: close the edit review modal and clear fields
  closeEditReviewModal() {
    this.editingReviewId = null;
    this.updatedReviewDescription = '';
  }

  // New: update review submit handler
  updateReview(): void {
    const review = this.reviews.find(r => r.reviewID === this.editingReviewId);
    if (review) {
      review.description = this.updatedReviewDescription;

      this._productService.updateDescription(review).subscribe(
        (isUpdated: boolean) => {
          if (isUpdated) {
            console.log('Review updated successfully');
            this.closeEditReviewModal();
          } else {
            console.warn('Review update failed on the server side');
            // Optionally show a toast or alert here
          }
        },
        error => {
          console.error('Error updating review:', error);
          // Optionally show a toast or alert here
        }
      );
    }
  }


  isOwnReview(review: IReview): boolean {
    return this.currentUserID === review.userID;
  }

  setActiveImage(imageUrl: string) {
    this.activeImageUrl = imageUrl;
    if (this.is3DViewActive) {
      this.is3DViewActive = false;
    }
  }

  active3DView() {
    this.is3DViewActive = true;
  }

  incrementQuantity() {
    if (this.product && this.quantity < this.product.quantity) {
      this.quantity++;
    }
  }

  decrementQuantity() {
    if (this.quantity > 1) {
      this.quantity--;
    }
  }

  addToCart() {
    const ui: string = <string>sessionStorage.getItem("userId");
    const uri: string = <string>sessionStorage.getItem("userRoleId");

    this.userId = parseInt(ui);
    this.userRoleId = parseInt(uri);

    if (!this.userId) {
      this.router.navigate(['/cart']);
    } else {
      if (this.product) {
        const cartItem: ICartItem = {
          userId: this.userId,
          productId: this.product.productId,
          quantity: this.quantity
        }

        this._cartSerive.addProductToCart(cartItem).subscribe(
          responseData => {
            if (responseData) {
              this.showToastMessage("Product Added to Cart", 1);
            } else {
              this.showToastMessage("Already Added to Cart", 0);
            }
          },
          responseError => {
            this.errorMsg = responseError;
            console.error("Error Wishlisting product:", this.errorMsg);
          }
        );
      }
    }
  }

  addToWhishlist() {
    const ui: string = <string>sessionStorage.getItem("userId");
    const uri: string = <string>sessionStorage.getItem("userRoleId");

    this.userId = parseInt(ui);
    this.userRoleId = parseInt(uri);

    if (!this.userId) {
      this.router.navigate(['/wishlist']);
    } else {
      if (this.product) {
        const wishlistProduct: ISavedProduct = {
          userId: this.userId,
          productId: this.product.productId
        };
        this._productService.addProductToWishlist(wishlistProduct).subscribe(
          responseData => {
            if (responseData) {
              this.showToastMessage("Product Added to Wishlist", 1);
            } else {
              this.showToastMessage("Already Added to Wishlist", 0);
            }
          },
          responseError => {
            this.errorMsg = responseError;
            console.error("Error Wishlisting product:", this.errorMsg);
          },
          () => { console.log("Add to Wishlist successfully executed!!"); }
        );
      }
    }
  }

  showToastMessage(message: string, status: number) {
    this.toastMessage = message;
    this.toastStatus = status; // 0 = already added (orange), 1 = successfully added (green)
    this.showToast = true;

    setTimeout(() => {
      const toastElement = this.elementRef.nativeElement.querySelector('.toast');
      if (toastElement) {
        toastElement.classList.add('hide');
      }

      setTimeout(() => {
        this.showToast = false;
      }, 300);
    }, 3000);
  }
}
