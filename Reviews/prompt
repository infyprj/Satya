The below is the reviewController code::
using Infosys.Shop3D.DataAccessLayer;
using Infosys.Shop3D.DataAccessLayer.Models;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;

namespace Infosys.Shop3D.WebServices.Controllers
{
    [Route("api/[controller]/[action]")]
    [ApiController]
    public class ReviewsController : Controller
    {
        public Shop3DRepository repository;
        public ReviewsController(Shop3DRepository repository)
        {
            this.repository = repository;
        }

        [HttpGet]
        public JsonResult GetReviews(int productId)
        {
            List<ReviewClass> reviews = new List<ReviewClass>();
            try
            {
                reviews = repository.GetReviewsByProduct(productId);
            }
            catch (Exception ex)
            {
                reviews = null;
            }
            return Json(reviews);
        }

        [HttpPost]
        public JsonResult AddReview([FromBody] ReviewModel model)
        {
            bool status = false;
            try
            {
                status = repository.AddReview(model.UserID, model.ProductID, model.Description);
            }
            catch (Exception ex)
            {
                status = false;
            }
            return Json(status);
        }

        [HttpPut]
        public JsonResult UpdateVisibility([FromBody] VisibilityModel model)
        {
            bool status = false;
            try
            {
                status = repository.UpdateReviewVisibility(model.ReviewID, model.UserID, model.IsVisible);
            }
            catch (Exception ex)
            {
                status = false;
            }
            return Json(status);
        }

    }

    public class ReviewModel
    {
        public int ProductID { get; set; }
        public int UserID { get; set; }
        public string Description { get; set; }
    }

    public class VisibilityModel
    {
        public int ReviewID { get; set; }
        public int UserID { get; set; }
        public bool IsVisible { get; set; }
    }

}


The below are the related web api swagger links for the reviews controller.

Curl

curl -X 'GET' \
  'https://localhost:7195/api/Reviews/GetReviews?productId=2' \
  -H 'accept: */*'
Request URL
https://localhost:7195/api/Reviews/GetReviews?productId=2
Response body
[
  {
    "reviewID": 2,
    "productID": 2,
    "userID": 2,
    "description": "The desk is sturdy and has plenty of space for my work essentials.",
    "reviewDate": "2025-05-27T10:29:17.237",
    "isVisible": true,
    "firstName": "Bob",
    "lastName": "Manager"
  },
  {
    "reviewID": 6,
    "productID": 2,
    "userID": 4,
    "description": "It would be more comfortable if the height of the desk is less.",
    "reviewDate": "2025-05-27T10:37:33.463",
    "isVisible": true,
    "firstName": "Diana",
    "lastName": "Viewer"
  }
]

Request body
{
  "productID": 2,
  "userID": 4,
  "description": "It would be more comfortable if the height of the desk is less."
}

Curl

curl -X 'POST' \
  'https://localhost:7195/api/Reviews/AddReview' \
  -H 'accept: */*' \
  -H 'Content-Type: application/json' \
  -d '{
  "productID": 2,
  "userID": 4,
  "description": "It would be more comfortable if the height of the desk is less."
}'
Request URL
https://localhost:7195/api/Reviews/AddReview
Response body
true

Request body
{
  "reviewID": 6,
  "userID": 4,
  "isVisible": false
}

Curl

curl -X 'PUT' \
  'https://localhost:7195/api/Reviews/UpdateVisibility' \
  -H 'accept: */*' \
  -H 'Content-Type: application/json' \
  -d '{
  "reviewID": 6,
  "userID": 4,
  "isVisible": false
}'
Request URL
https://localhost:7195/api/Reviews/UpdateVisibility

Response body
true


I ensure you that these links are working fine.
The below is the product-detail page codes.

product.sevice.ts :
import { Injectable } from "@angular/core"
import { HttpClient, HttpErrorResponse, HttpHeaders } from "@angular/common/http"
import { throwError,  Observable, catchError, BehaviorSubject } from "rxjs"
import { tap } from 'rxjs/operators';
import { IProduct } from "../../interfaces/product"
import { ISavedProduct } from "../../interfaces/saved-product";

@Injectable({
  providedIn: "root",
})
export class ProductService {

  // Add BehaviorSubject for wishlist count
  private wishlistCountSubject = new BehaviorSubject<number>(0);
  public wishlistCount$ = this.wishlistCountSubject.asObservable();

  constructor(private http: HttpClient) { }

  // Method to update wishlist count
  private updateWishlistCount(count: number): void {
    this.wishlistCountSubject.next(count);
  }

  // Method to refresh wishlist count from server
  refreshWishlistCount(userId: number): void {
    this.getSavedProducts(userId).subscribe(
      products => {
        if (products) {
          this.updateWishlistCount(products.length);
        }
      },
      error => {
        console.error('Error refreshing wishlist count:', error);
      }
    );
  }

  getProducts(): Observable<IProduct[]> {
    return this.http.get<IProduct[]>('https://localhost:7195/api/Product/GetAllProducts').pipe(catchError(this.errorHandler));
  }

  getProductById(id: number): Observable<IProduct> {
    return this.http.get<IProduct>(`https://localhost:7195/api/Product/GetProductById?id=${id}`).pipe(catchError(this.errorHandler));
  }

  getProductsByCategory(categoryId: number): Observable<IProduct[]> {
    return this.http.get<IProduct[]>(`https://localhost:7195/api/Product/GetProductsByCategory?categoryId=${categoryId}`).pipe(catchError(this.errorHandler));
  }

  getProductsByPriceRange(minPrice: number, maxPrice: number): Observable<IProduct[]> {
    return this.http.get<IProduct[]>(`https://localhost:7195/api/Product/GetProductsByPriceRange?minPrice=${minPrice}&maxPrice=${maxPrice}`).pipe(catchError(this.errorHandler));
  }

  getSearchProducts(item: string): Observable<IProduct[]> {
    return this.http.get<IProduct[]>(`https://localhost:7195/api/Product/SearchProducts?searchTerm=${item}`).pipe(catchError(this.errorHandler));
  }

  getSavedProducts(id: number): Observable<IProduct[]> {
    return this.http.get<IProduct[]>(`https://localhost:7195/api/SavedProduct/GetSavedProducts?userId=${id}`).pipe(catchError(this.errorHandler));
  }

  addProduct(product: IProduct): Observable<IProduct> {
    return this.http.post<IProduct>(`https://localhost:7195/api/Product/AddProduct`, product).pipe(catchError(this.errorHandler));
  }

  updateProduct(product: IProduct): Observable<boolean> {
    return this.http.put<boolean>(`https://localhost:7195/api/Product/UpdateProduct`, product).pipe(catchError(this.errorHandler));
  }

  deleteProduct(id: number): Observable<boolean> {
    return this.http.delete<boolean>(`https://localhost:7195/api/Product/DeleteProduct?id=${id}`).pipe(catchError(this.errorHandler));
  }

  removeSavedProduct(userIdd: number, productIdd: number): Observable<boolean> {
    var s: ISavedProduct = {
      userId: userIdd,
      productId: productIdd
    };
    let HttpOptions = { Headers: new HttpHeaders({ 'Content-Type': 'application/json' }), body: s };
    return this.http.delete<boolean>(`https://localhost:7195/api/SavedProduct/RemoveSavedProduct`, HttpOptions).pipe(
      tap(response => {
        // Refresh wishlist count after successful removal
        if (response) {
          this.refreshWishlistCount(userIdd);
        }
      }),
      catchError(this.errorHandler)
    );
  }

  getProductImages(id: number): Observable<IProduct> {
    return this.http.get<IProduct>(`https://localhost:7195/api/Product/GetProductImages?productId=${id}`).pipe(catchError(this.errorHandler));
  }

  addProductToWishlist(whishlistProduct: ISavedProduct): Observable<boolean> {
    return this.http.post<boolean>(`https://localhost:7195/api/SavedProduct/SaveProduct`, whishlistProduct).pipe(
      tap(response => {
        // Refresh wishlist count after successful addition
        if (response) {
          this.refreshWishlistCount(whishlistProduct.userId);
        }
      }),
      catchError(this.errorHandler)
    );
  }

  getProductStock(productId: number): Observable<number> {
    return this.http.get<number>(`https://localhost:7195/api/Product/GetProductStock/${productId}`)
      .pipe(catchError(this.errorHandler));
  }

  errorHandler(error: HttpErrorResponse) {
    console.log(error);
    return throwError(error.message || 'ERROR');
  }
}


product-detail.component.ts::
import { Component, OnInit, AfterViewInit, ElementRef } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { IProduct } from '../interfaces/product';
import { ISavedProduct } from '../interfaces/saved-product'
import { ProductService } from '../services/product-service/product.service';
import { ICartItem } from '../interfaces/cart';
import { CartService } from '../services/cart-service/cart.service';


interface ProductImage {
  imageId: number;
  productId: number;
  imageUrl: string;
}

@Component({
  selector: 'app-product-detail',
  templateUrl: './product-detail.component.html',
  styleUrls: ['./product-detail.component.css']
})
export class ProductDetailComponent implements OnInit {
  product: IProduct | undefined;
  productImages: ProductImage[] = [];
  loading: boolean = true;
  errorMsg: string = '';
  activeImageUrl: string = '';
  quantity: number = 1;
  productId: number = 0;
  is3DViewActive = false
  modelUrl = "https://modelviewer.dev/shared-assets/models/Astronaut.glb" // Default model URL
  showToast = false;
  toastMessage = "";
  toastStatus = 0; // 0 = already added (orange), 1 = successfully added (green)
  userId: number = 0;
  userRoleId: number = 0;



  constructor(
    private route: ActivatedRoute,
    private router: Router,
    private _productService: ProductService,
    private _cartSerive: CartService,
    private elementRef: ElementRef,
  ) { }

  ngOnInit(): void {
    this.productId = +this.route.snapshot.params['id'];

    

    if (this.productId) {
      this.getProductDetails(this.productId);
      this.getProductImages(this.productId);
    } else {
      this.errorMsg = 'Invalid product ID';
      this.loading = false;
    }

  }
  ngAfterViewInit() {
    
    this.loadModelViewerScript()
  }

  loadModelViewerScript() {
    const script = document.createElement("script")
    script.type = "module"
    script.src = "https://ajax.googleapis.com/ajax/libs/model-viewer/3.3.0/model-viewer.min.js"
    document.body.appendChild(script)
  }


  getProductDetails(id: number) {
    console.log("Fetching product details for ID:", id);
    this._productService.getProductById(id).subscribe(
      responseProductData => {
        console.log("Product data received:", responseProductData);
        this.product = responseProductData;
        if (this.product) {
          this.activeImageUrl = this.product.thumbnailUrl;
          this.modelUrl = this.product.modelUrl || this.modelUrl;

        }
        this.loading = false;
      },
      responseProductError => {
        this.errorMsg = responseProductError;
        this.loading = false;
        console.error("Error fetching product:", this.errorMsg);
      },
      () => { console.log('GetProductDetails method executed successfully'); }
    );
  }


  getProductImages(id: number) {
    console.log("Fetching product images for ID:", id);
    this._productService.getProductImages(id).subscribe(
      (responseImagesData: any) => {
        console.log("Product images received:", responseImagesData);
        this.productImages = responseImagesData;
      },
      responseImagesError => {
        this.errorMsg = responseImagesError;
        console.error("Error fetching images:", this.errorMsg);
      },
      () => { console.log('GetProductImages method executed successfully'); }
    );
  }


  setActiveImage(imageUrl: string) {
    this.activeImageUrl = imageUrl;
    if (this.is3DViewActive) {
      this.is3DViewActive = false;
    }
  }


  active3DView() {
    this.is3DViewActive = true;

  }

  incrementQuantity() {
    if (this.product && this.quantity < this.product.quantity) {
      this.quantity++;
    }
  }

  decrementQuantity() {
    if (this.quantity > 1) {
      this.quantity--;
    }
  }

  addToCart() {

    const ui: string = <string>sessionStorage.getItem("userId");
    const uri: string = <string>sessionStorage.getItem("userRoleId");

    this.userId = parseInt(ui);
    this.userRoleId = parseInt(uri);

    if (!this.userId) {
      this.router.navigate(['/cart']);
    } else {
      if (this.product) {
        const cartItem: ICartItem = {
          userId: this.userId,
          productId: this.product.productId,
          quantity: this.quantity
        }

        this._cartSerive.addProductToCart(cartItem).subscribe(
          responseData => {
            if (responseData) {
              this.showToastMessage("Product Added to Cart", 1);
            } else {
              this.showToastMessage("Already Added to Cart", 0)
            }
          },
          responseError => {
            this.errorMsg = responseError
            console.error("Error Wishlisting product:", this.errorMsg);
          }
        )

      }

    }

    
  }


  addToWhishlist() {

    const ui: string = <string>sessionStorage.getItem("userId");
    const uri: string = <string>sessionStorage.getItem("userRoleId");

    this.userId = parseInt(ui);
    this.userRoleId = parseInt(uri);

    if (!this.userId) {
      this.router.navigate(['/wishlist']);
    } else {


    if (this.product) {
      const wishlistProduct: ISavedProduct = {
        userId: this.userId,
        productId: this.product.productId
      }
      this._productService.addProductToWishlist(wishlistProduct).subscribe(
        responseData => {
          if (responseData) {
            // Product successfully added - show green toast
            this.showToastMessage("Product Added to Wishlist", 1)
          } else {
            // Product already added - show orange toast
            this.showToastMessage("Already Added to Wishlist", 0)
          }
        },
        responseError => {
          this.errorMsg = responseError
          console.error("Error Wishlisting product:", this.errorMsg);
        },
        () => { console.log("Add to Wishlist successfully executed!!"); }
      )
      }
    }
  }


  showToastMessage(message: string, status: number) {
    this.toastMessage = message;
    this.toastStatus = status; // 0 = already added (orange), 1 = successfully added (green)
    this.showToast = true;

    setTimeout(() => {
      // Add the hide class first to animate the toast sliding up
      const toastElement = this.elementRef.nativeElement.querySelector('.toast');
      if (toastElement) {
        toastElement.classList.add('hide');
      }

      // Then hide the toast after animation completes
      setTimeout(() => {
        this.showToast = false;
      }, 300); // Match this with the slideUp animation duration
    }, 3000);
  }
}

product-detail.component.html::

<app-navbar></app-navbar>


<div class="container mt-5" *ngIf="loading">
  <div class="row">
    <div class="col-12 text-center">
      <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
      </div>
    </div>
  </div>
</div>


<div class="toast-container position-fixed top-0 start-50 translate-middle-x p-2 mt-2" *ngIf="showToast">
  <div class="toast" role="alert" aria-live="assertive" aria-atomic="true"
       [ngClass]="{'show': showToast, 'toast-success': toastStatus === 1, 'toast-warning': toastStatus === 0}">
    <div class="toast-body d-flex align-items-center justify-content-center">
      <i *ngIf="toastStatus === 1" class="fa fa-check-circle me-2"></i>
      <i *ngIf="toastStatus === 0" class="fa fa-exclamation-circle me-2"></i>
      {{toastMessage}}
    </div>
  </div>
</div>



<div class="container mt-5" *ngIf="!loading && product">
  <div class="row">
    <!-- Product Images Section -->
    <div class="col-md-6">
      <div class="product-image-container mb-3 pl-2">
        <!-- Regular Image View -->
        <img *ngIf="!is3DViewActive" [src]="activeImageUrl" class="img-fluid main-product-image p-3" alt="{{ product.name }}">

        <!-- 3D Model Viewer -->
        <model-viewer *ngIf="is3DViewActive"
                      src="{{ modelUrl }}"
                      alt="{{ product.name }} 3D Model"
                      auto-rotate
                      camera-controls
                      shadow-intensity="1"
                      exposure="1"
                      class="model-viewer-container">
        </model-viewer>
      </div>

      <div class="product-thumbnails d-flex flex-wrap">
        <!-- Main thumbnail -->
        <div class="thumbnail-item me-2 mb-2" (click)="setActiveImage(product.thumbnailUrl)"
             [ngClass]="{'active-thumbnail': activeImageUrl === product.thumbnailUrl && !is3DViewActive}"
             >
          <img [src]="product.thumbnailUrl" class=""
               
               alt="product image">
        </div>

        <!-- 3D Model thumbnail (second position) -->
        <div class="thumbnail-item me-2 mb-2 model-3d-thumb" (click)="active3DView()"
             [ngClass]="{'active-thumbnail': is3DViewActive}"
             >
          <div class=" 3d-thumbnail"
               >
            <i class="fa fa-cube 3d-icon"></i>
            <span class="3d-label">3D</span>
          </div>
        </div>

        <!-- Additional images (starting from third position) -->
        <!--<div class="thumbnail-item me-2 mb-2" *ngFor="let image of productImages" (click)="setActiveImage(image.imageUrl)"
             [ngClass]="{'active-thumbnail': activeImageUrl === image.imageUrl && !is3DViewActive}"
             >
          <img [src]="image.imageUrl" class=""
               
               alt="product image">
        </div>-->
      </div>
    </div>

    <!-- Product Details Section -->
    <div class="col-md-6 product-detail-section">
      <h1 class="product-title mb-3">{{ product.name }}</h1>

      <div class="product-price mb-4">
        <h3 class="mb-2">₹{{ product.price.toLocaleString() }}</h3>
        <span class="text-success "><span class="fw-bold">In Stock </span>({{ product.quantity }} available)</span>
      </div>

      <div class="quantity-selector d-flex flex-row mb-4 ">
        <div class="input-group flex" style="width: 150px;">
          <button class="btn btn-outline-secondary" type="button" (click)="decrementQuantity()">
            <i class="fa fa-minus"></i>
          </button>
          <input type="text" class="form-control text-center" [value]="quantity" readonly>
          <button class="btn btn-outline-secondary" type="button" (click)="incrementQuantity()">
            <i class="fa fa-plus"></i>
          </button>
        </div>
      </div>

      <div class="product-actions mb-4">
        <button class="btn btn-primary btn-lg me-2" (click)="addToCart()">
          <i class="fa fa-shopping-cart me-2"></i>Add to Cart
        </button>
        <button class="btn btn-outline-secondary btn-lg" (click)="addToWhishlist()">
          <i class="fa fa-heart me-2"></i>Add to Wishlist
        </button>
      </div>
      <div class="product-description mb-4">
        <h4>Description</h4>
        <p>{{ product.description }}</p>
      </div>
    </div>
  </div>
</div>

<!-- Error message display -->
<div class="container mt-5" *ngIf="!loading && !product">
  <div class="alert alert-danger" role="alert">
    <h4 class="alert-heading">Product Not Found!</h4>
    <p>Sorry, we couldn't find the product you're looking for. {{ errorMsg }}</p>
    <hr>
    <p class="mb-0">Please try again or browse our other products.</p>
  </div>
</div>

product-detail.component.css::
.main-product-image {
  width: 100%;
  height: 400px;
  border-radius: 8px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  object-fit: contain;
  max-height: 400px;
  background-color: #f8f9fa;
}

.product-image-container {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 400px;
  border-radius: 8px;
  overflow: hidden;
}

.thumbnail-item {
  cursor: pointer;
  transition: all 0.2s ease;
  width: 80px;
  height: 80px;
  overflow: hidden;
  border: 1px solid #dee2e6;
  border-radius: 5px;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

  .thumbnail-item img {
    width: 100%;
    height: 600px;
    object-fit: cover;
  }

  .thumbnail-item:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  }

.active-thumbnail {
  border: 2px solid #007bff !important;
}

/* 3D Model Viewer Styles */
model-viewer {
  width: 100%;
  height: 600px;
  background-color: #f8f9fa;
  --poster-color: transparent;
}

.model-viewer-container {
  width: 100%;
  height: 100%;
}

\
.3
d-thumbnail {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  background-color: #e9ecef;
  height: 100%;
  width: 100%;
}

.3
d-icon {
  font-size: 24px;
  color: #007bff;
}

.3
d-label {
  font-size: 12px;
  font-weight: bold;
  margin-top: 4px;
  color: #007bff;
}

.product-detail-section {
  text-align: start;
}

.product-title {
  font-weight: 700;
  margin-bottom: 0.5rem;
}

.product-rating {
  color: #ffc107;
}

.product-price h3 {
  font-weight: 700;
  color: #212529;
  margin-bottom: 0.5rem;
}

.quantity-selector input {
  font-weight: bold;
}

.product-actions .btn {
  padding: 0.75rem 1.5rem;
}

.nav-tabs .nav-link {
  font-weight: 500;
}

.tab-content {
  background-color: #fff;
}

/* Responsive adjustments */
@media (max-width: 767.98px) {
  .product-image-container {
    height: 300px;
  }

  .thumbnail-item {
    width: 60px;
    height: 60px;
  }

  .product-actions .btn {
    width: 100%;
    margin-bottom: 0.5rem;
  }

  model-viewer {
    height: 300px;
  }
}

.toast-container{
    z-index:1000;
    width:auto;
    max-width:80%;
    min-width:200px;
    background-color:transparent;
}

/* Toast Animations */
@keyframes slideDown {
  from {
    transform: translateY(-100%);
    opacity: 0;
  }

  to {
    transform: translateY(0);
    opacity: 1;
  }
}

@keyframes slideUp {
  from {
    transform: translateY(0);
    opacity: 1;
  }

  to {
    transform: translateY(-100%);
    opacity: 0;
  }
}

.toast {
  display: inline-flex;
  opacity: 0;
  width:auto;
/*  background-color: white;*/
  backdrop-filter:blur(1000px);
  border-radius: 10px;
  transform: translateY(-100%);
  transition: all 0.3s ease;
/*  padding: 12px;*/
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
}

/* Success toast style (green) */
.toast-success {
  
  background-color: #28a745;
  color: white;
}

/* Warning toast style (orange) */
.toast-warning {
  background-color:  #fd7e14;
  color: white;
}

.toast.show {
  display: inline-flex;
  opacity: 1;
  animation: slideDown 0.4s ease forwards;
}

.toast.hide {
  animation: slideUp 0.3s ease forwards;
}

.toast-body{
    white-space:nowrap;
}


Now refer to all the above codes. What I want is I want to add a reviews column in the product-detail page, where review for each product will be displayed below.
Give me code for this.
I will give you the related databse codes also.

CREATE TABLE Users (
    UserID INT PRIMARY KEY IDENTITY(1,1),
    Email NVARCHAR(255) NOT NULL UNIQUE,
    PasswordHash NVARCHAR(255) NOT NULL,
    FirstName NVARCHAR(100),
    LastName NVARCHAR(100),
    PhoneNumber NVARCHAR(20),
    Address NVARCHAR(255),
    City NVARCHAR(100),
    State NVARCHAR(100),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(100),
    RoleID INT NOT NULL FOREIGN KEY REFERENCES Roles(RoleID)
);
GO
    
INSERT INTO Users (Email, PasswordHash, FirstName, LastName, PhoneNumber, Address, City, State, PostalCode, Country, RoleID)
VALUES 
('admin@example.com', 'hashed_pw_1', 'Alice', 'Admin', '1234567890', '123 Admin St', 'New York', 'NY', '10001', 'USA', 2),
('manager@example.com', 'hashed_pw_2', 'Bob', 'Manager', '2345678901', '456 Manager Ave', 'Los Angeles', 'CA', '90001', 'USA', 2),
('editor@example.com', 'hashed_pw_3', 'Charlie', 'Editor', '3456789012', '789 Editor Blvd', 'Chicago', 'IL', '60601', 'USA', 2),
('viewer@example.com', 'hashed_pw_4', 'Diana', 'Viewer', '4567890123', '101 Viewer Rd', 'Houston', 'TX', '77001', 'USA', 2),
('support@example.com', 'hashed_pw_5', 'Ethan', 'Support', '5678901234', '202 Support Ln', 'Phoenix', 'AZ', '85001', 'USA', 2),
('admin@mail.com', 'Admin@123', 'Fiona', 'Admin', '6789012345', '303 HR Pkwy', 'Philadelphia', 'PA', '19101', 'USA', 3);
GO



CREATE TABLE Products (
    ProductID INT PRIMARY KEY IDENTITY(1,1),
    Name NVARCHAR(255) NOT NULL,
    Description NVARCHAR(MAX),
    Price DECIMAL(18, 2) NOT NULL,
    CategoryID INT NOT NULL FOREIGN KEY REFERENCES Categories(CategoryID),
    ModelURL NVARCHAR(255) NOT NULL, -- URL to 3D model file
    ThumbnailURL NVARCHAR(255),
    Quantity INT DEFAULT 0,
);
GO


INSERT INTO Products (Name, Description, Price, CategoryID, ModelURL, ThumbnailURL, Quantity)
VALUES 
('Velvet Elegance Two-Seater', 'A luxurious two-seater sofa featuring premium velvet upholstery with a sturdy wooden frame, designed for modern living rooms. The plush cushions and elegant design provide both comfort and style, making it a perfect centerpiece for your home decor. Available in multiple color options upon request.', 15000, 1, 'https://shop3dprojectaccount.blob.core.windows.net/3d-models/Sofa1.glb', 'https://shop3dprojectaccount.blob.core.windows.net/images/Sofa1.png', 20),
('Catalina Office Desk', 'A sleek and functional office desk crafted from high-quality engineered wood with a durable laminate finish. The spacious work surface and minimalist design make it ideal for home offices or professional workspaces. Features cable management and ergonomic design for enhanced productivity.', 6000, 2, 'https://shop3dprojectaccount.blob.core.windows.net/3d-models/Table.glb', 'https://shop3dprojectaccount.blob.core.windows.net/images/Table.png', 35),
('Serenity Platform Bed', 'A modern platform bed with built-in under-bed storage, crafted from premium engineered wood for durability. The sleek design features a low profile with ample storage space, perfect for organizing bedding and accessories. The sturdy slat support ensures comfort and longevity for all mattress types.', 20000, 3, 'https://shop3dprojectaccount.blob.core.windows.net/3d-models/Bed.glb', 'https://shop3dprojectaccount.blob.core.windows.net/images/Bed.png', 20),
('Harmony Rocking Chair', 'Handcrafted from solid wood, this elegant rocking chair is designed for relaxation in gardens or cozy indoor spaces. The ergonomic curved backrest and smooth rocking motion provide exceptional comfort. Finished with a weather-resistant stain for outdoor durability.', 4500, 4, 'https://shop3dprojectaccount.blob.core.windows.net/3d-models/Chair.glb', 'https://shop3dprojectaccount.blob.core.windows.net/images/Chair.png', 50),
('Tokyo Curve Sectional', 'A contemporary five-seater sectional sofa with a gracefully curved design, perfect for spacious living areas. Upholstered in high-resilience foam and premium fabric for lasting comfort. The modular design allows flexible arrangement to suit any room layout.', 18000, 1, 'https://shop3dprojectaccount.blob.core.windows.net/3d-models/Sofa2.glb', 'https://shop3dprojectaccount.blob.core.windows.net/images/Sofa2.png', 10);
Go

CREATE TABLE Reviews (
    ReviewID INT PRIMARY KEY IDENTITY(1,1),
    ProductID INT NOT NULL FOREIGN KEY REFERENCES Products(ProductID) ON DELETE CASCADE,
    UserID INT NOT NULL FOREIGN KEY REFERENCES Users(UserID) ON DELETE CASCADE,
    Description NVARCHAR(MAX) NOT NULL,
    ReviewDate DATETIME DEFAULT GETDATE(),
    IsVisible BIT DEFAULT 1
);
GO


INSERT INTO Reviews (ProductID, UserID, Description, IsVisible)
VALUES
(1, 1, 'Absolutely love this sofa! Very comfortable and looks great in my living room.', 1),
(2, 2, 'The desk is sturdy and has plenty of space for my work essentials.', 1),
(3, 3, 'Nice bed frame, but the finish was a bit lighter than expected.', 1),
(4, 4, 'Rocking chair is perfect for my porch and very relaxing.', 1),
(5, 5, 'Great sectional sofa, fits perfectly in my living room.', 1);
GO
Now give me the product.service.ts
product-detail.component.ts
product-detail.component.html
product-detail.component.css
give me the entire codes, but highlight the part which you are adding.
