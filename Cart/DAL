// Add these model classes if you don't already have them

public class Cart
{
    public int CartID { get; set; }
    public int UserID { get; set; }
    public DateTime CreatedDate { get; set; }
    public DateTime LastModifiedDate { get; set; }
    public List<CartItem> CartItems { get; set; }
}

public class CartItem
{
    public int CartItemID { get; set; }
    public int CartID { get; set; }
    public int ProductID { get; set; }
    public int Quantity { get; set; }
    public string CustomizationDetails { get; set; }
    public DateTime DateAdded { get; set; }
    
    // Navigation properties
    public Product Product { get; set; }
    public decimal Subtotal => Product?.Price * Quantity ?? 0;
}

public class CartSummary
{
    public int TotalItems { get; set; }
    public int TotalQuantity { get; set; }
    public decimal TotalAmount { get; set; }
}

// Add these methods to your Shop3DRepository class

public List<CartItem> GetCartItems(int userId)
{
    List<CartItem> cartItems = new List<CartItem>();
    try
    {
        using (SqlConnection connection = new SqlConnection(connectionString))
        {
            SqlCommand command = new SqlCommand("sp_GetCartItems", connection);
            command.CommandType = CommandType.StoredProcedure;
            command.Parameters.AddWithValue("@UserID", userId);
            
            connection.Open();
            SqlDataReader reader = command.ExecuteReader();
            
            while (reader.Read())
            {
                CartItem item = new CartItem
                {
                    CartItemID = Convert.ToInt32(reader["CartItemID"]),
                    CartID = Convert.ToInt32(reader["CartID"]),
                    ProductID = Convert.ToInt32(reader["ProductID"]),
                    Quantity = Convert.ToInt32(reader["Quantity"]),
                    CustomizationDetails = reader["CustomizationDetails"] as string,
                    DateAdded = Convert.ToDateTime(reader["DateAdded"]),
                    Product = new Product
                    {
                        ProductID = Convert.ToInt32(reader["ProductID"]),
                        Name = reader["ProductName"].ToString(),
                        Price = Convert.ToDecimal(reader["Price"]),
                        ThumbnailURL = reader["ThumbnailURL"].ToString(),
                        ModelURL = reader["ModelURL"].ToString()
                    }
                };
                
                cartItems.Add(item);
            }
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine(ex.Message);
        cartItems = new List<CartItem>();
    }
    return cartItems;
}

public CartSummary GetCartSummary(int userId)
{
    CartSummary summary = new CartSummary();
    try
    {
        using (SqlConnection connection = new SqlConnection(connectionString))
        {
            SqlCommand command = new SqlCommand("sp_GetCartSummary", connection);
            command.CommandType = CommandType.StoredProcedure;
            command.Parameters.AddWithValue("@UserID", userId);
            
            connection.Open();
            SqlDataReader reader = command.ExecuteReader();
            
            if (reader.Read())
            {
                summary.TotalItems = reader["TotalItems"] != DBNull.Value ? Convert.ToInt32(reader["TotalItems"]) : 0;
                summary.TotalQuantity = reader["TotalQuantity"] != DBNull.Value ? Convert.ToInt32(reader["TotalQuantity"]) : 0;
                summary.TotalAmount = reader["TotalAmount"] != DBNull.Value ? Convert.ToDecimal(reader["TotalAmount"]) : 0;
            }
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine(ex.Message);
        summary = new CartSummary { TotalItems = 0, TotalQuantity = 0, TotalAmount = 0 };
    }
    return summary;
}

public bool AddToCart(int userId, int productId, int quantity, string customizationDetails = null)
{
    bool success = false;
    try
    {
        using (SqlConnection connection = new SqlConnection(connectionString))
        {
            SqlCommand command = new SqlCommand("sp_AddToCart", connection);
            command.CommandType = CommandType.StoredProcedure;
            command.Parameters.AddWithValue("@UserID", userId);
            command.Parameters.AddWithValue("@ProductID", productId);
            command.Parameters.AddWithValue("@Quantity", quantity);
            
            if (customizationDetails != null)
                command.Parameters.AddWithValue("@CustomizationDetails", customizationDetails);
            else
                command.Parameters.AddWithValue("@CustomizationDetails", DBNull.Value);
            
            connection.Open();
            int result = (int)command.ExecuteScalar();
            success = result > 0;
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine(ex.Message);
        success = false;
    }
    return success;
}

public bool UpdateCartItemQuantity(int cartItemId, int quantity)
{
    bool success = false;
    try
    {
        using (SqlConnection connection = new SqlConnection(connectionString))
        {
            SqlCommand command = new SqlCommand("sp_UpdateCartItemQuantity", connection);
            command.CommandType = CommandType.StoredProcedure;
            command.Parameters.AddWithValue("@CartItemID", cartItemId);
            command.Parameters.AddWithValue("@Quantity", quantity);
            
            connection.Open();
            int result = (int)command.ExecuteScalar();
            success = result > 0;
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine(ex.Message);
        success = false;
    }
    return success;
}

public bool RemoveFromCart(int cartItemId)
{
    bool success = false;
    try
    {
        using (SqlConnection connection = new SqlConnection(connectionString))
        {
            SqlCommand command = new SqlCommand("sp_RemoveFromCart", connection);
            command.CommandType = CommandType.StoredProcedure;
            command.Parameters.AddWithValue("@CartItemID", cartItemId);
            
            connection.Open();
            int result = (int)command.ExecuteScalar();
            success = result > 0;
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine(ex.Message);
        success = false;
    }
    return success;
}

public bool ClearCart(int userId)
{
    bool success = false;
    try
    {
        using (SqlConnection connection = new SqlConnection(connectionString))
        {
            SqlCommand command = new SqlCommand("sp_ClearCart", connection);
            command.CommandType = CommandType.StoredProcedure;
            command.Parameters.AddWithValue("@UserID", userId);
            
            connection.Open();
            int result = (int)command.ExecuteScalar();
            success = result > 0;
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine(ex.Message);
        success = false;
    }
    return success;
}

public int ConvertCartToOrder(int userId, string shippingAddress, string shippingCity, 
                             string shippingState, string shippingPostalCode, string shippingCountry)
{
    int orderId = 0;
    try
    {
        using (SqlConnection connection = new SqlConnection(connectionString))
        {
            SqlCommand command = new SqlCommand("sp_ConvertCartToOrder", connection);
            command.CommandType = CommandType.StoredProcedure;
            command.Parameters.AddWithValue("@UserID", userId);
            command.Parameters.AddWithValue("@ShippingAddress", shippingAddress);
            command.Parameters.AddWithValue("@ShippingCity", shippingCity);
            command.Parameters.AddWithValue("@ShippingState", shippingState);
            command.Parameters.AddWithValue("@ShippingPostalCode", shippingPostalCode);
            command.Parameters.AddWithValue("@ShippingCountry", shippingCountry);
            
            connection.Open();
            orderId = (int)command.ExecuteScalar();
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine(ex.Message);
        orderId = 0;
    }
    return orderId;
}
