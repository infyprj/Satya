// Add this CartController.cs file to your Controllers folder

using Microsoft.AspNetCore.Mvc;
using System;
using System.Collections.Generic;

[Route("api/[controller]")]
[ApiController]
public class CartController : ControllerBase
{
    private readonly IShop3DRepository repository;

    public CartController(IShop3DRepository repository)
    {
        this.repository = repository;
    }

    [HttpGet("items/{userId}")]
    public JsonResult GetCartItems(int userId)
    {
        List<CartItem> cartItems = new List<CartItem>();
        try
        {
            cartItems = repository.GetCartItems(userId);
        }
        catch (Exception)
        {
            cartItems = null;
        }
        return new JsonResult(cartItems);
    }

    [HttpGet("summary/{userId}")]
    public JsonResult GetCartSummary(int userId)
    {
        CartSummary summary = null;
        try
        {
            summary = repository.GetCartSummary(userId);
        }
        catch (Exception)
        {
            summary = new CartSummary { TotalItems = 0, TotalQuantity = 0, TotalAmount = 0 };
        }
        return new JsonResult(summary);
    }

    [HttpPost("add")]
    public JsonResult AddToCart([FromBody] AddToCartRequest request)
    {
        bool success = false;
        try
        {
            success = repository.AddToCart(request.UserId, request.ProductId, request.Quantity, request.CustomizationDetails);
        }
        catch (Exception)
        {
            success = false;
        }
        return new JsonResult(new { Success = success });
    }

    [HttpPut("update")]
    public JsonResult UpdateCartItemQuantity([FromBody] UpdateCartItemRequest request)
    {
        bool success = false;
        try
        {
            success = repository.UpdateCartItemQuantity(request.CartItemId, request.Quantity);
        }
        catch (Exception)
        {
            success = false;
        }
        return new JsonResult(new { Success = success });
    }

    [HttpDelete("remove/{cartItemId}")]
    public JsonResult RemoveFromCart(int cartItemId)
    {
        bool success = false;
        try
        {
            success = repository.RemoveFromCart(cartItemId);
        }
        catch (Exception)
        {
            success = false;
        }
        return new JsonResult(new { Success = success });
    }

    [HttpDelete("clear/{userId}")]
    public JsonResult ClearCart(int userId)
    {
        bool success = false;
        try
        {
            success = repository.ClearCart(userId);
        }
        catch (Exception)
        {
            success = false;
        }
        return new JsonResult(new { Success = success });
    }

    [HttpPost("checkout")]
    public JsonResult Checkout([FromBody] CheckoutRequest request)
    {
        int orderId = 0;
        try
        {
            orderId = repository.ConvertCartToOrder(
                request.UserId,
                request.ShippingAddress,
                request.ShippingCity,
                request.ShippingState,
                request.ShippingPostalCode,
                request.ShippingCountry
            );
        }
        catch (Exception)
        {
            orderId = 0;
        }
        return new JsonResult(new { Success = orderId > 0, OrderId = orderId });
    }
}

// Request models
public class AddToCartRequest
{
    public int UserId { get; set; }
    public int ProductId { get; set; }
    public int Quantity { get; set; }
    public string CustomizationDetails { get; set; }
}

public class UpdateCartItemRequest
{
    public int CartItemId { get; set; }
    public int Quantity { get; set; }
}

public class CheckoutRequest
{
    public int UserId { get; set; }
    public string ShippingAddress { get; set; }
    public string ShippingCity { get; set; }
    public string ShippingState { get; set; }
    public string ShippingPostalCode { get; set; }
    public string ShippingCountry { get; set; }
}
