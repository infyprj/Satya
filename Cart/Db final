-- Create Carts table
IF OBJECT_ID('CartItems') IS NOT NULL
    DROP TABLE CartItems
GO

IF OBJECT_ID('Carts') IS NOT NULL
    DROP TABLE Carts
GO

CREATE TABLE Carts (
    CartID INT PRIMARY KEY IDENTITY(1,1),
    UserID INT NOT NULL FOREIGN KEY REFERENCES Users(UserID) ON DELETE CASCADE
);
GO

-- Create CartItems table
CREATE TABLE CartItems (
    CartItemID INT PRIMARY KEY IDENTITY(1,1),
    CartID INT NOT NULL FOREIGN KEY REFERENCES Carts(CartID) ON DELETE CASCADE,
    ProductID INT NOT NULL FOREIGN KEY REFERENCES Products(ProductID),
    Quantity INT NOT NULL DEFAULT 1
);
GO

-- Insert sample data
INSERT INTO Carts (UserID)
VALUES 
(1),
(2),
(3);
GO

INSERT INTO CartItems (CartID, ProductID, Quantity)
VALUES 
(1, 1, 2),
(1, 3, 1),
(2, 2, 3),
(3, 4, 1);
GO

-- Stored Procedure to create a cart for a user
CREATE PROCEDURE sp_CreateCart
    @UserID INT
AS
BEGIN
    -- Check if user already has a cart
    IF EXISTS (SELECT 1 FROM Carts WHERE UserID = @UserID)
    BEGIN
        RETURN -1; -- User already has a cart
    END
    
    -- Create new cart
    INSERT INTO Carts (UserID)
    VALUES (@UserID);
    
    -- Return the new cart ID
    SELECT SCOPE_IDENTITY() AS CartID;
    RETURN 1;
END;
GO

-- Stored Procedure to get a user's cart
CREATE PROCEDURE sp_GetCartByUserID
    @UserID INT
AS
BEGIN
    SELECT c.CartID, c.UserID
    FROM Carts c
    WHERE c.UserID = @UserID;
END;
GO

-- Stored Procedure to add item to cart
CREATE PROCEDURE sp_AddToCart
    @UserID INT,
    @ProductID INT,
    @Quantity INT
AS
BEGIN
    DECLARE @CartID INT;
    
    -- Get the user's cart ID
    SELECT @CartID = CartID FROM Carts WHERE UserID = @UserID;
    
    -- If user doesn't have a cart, create one
    IF @CartID IS NULL
    BEGIN
        INSERT INTO Carts (UserID)
        VALUES (@UserID);
        
        SET @CartID = SCOPE_IDENTITY();
    END
    
    -- Check if product already exists in cart
    IF EXISTS (SELECT 1 FROM CartItems WHERE CartID = @CartID AND ProductID = @ProductID)
    BEGIN
        RETURN -1; -- Product already in cart
    END
    
    -- Add product to cart
    INSERT INTO CartItems (CartID, ProductID, Quantity)
    VALUES (@CartID, @ProductID, @Quantity);
    
    RETURN 1; -- Success
END;
GO

-- Stored Procedure to update cart item quantity
CREATE PROCEDURE sp_UpdateCartItemQuantity
    @CartItemID INT,
    @Quantity INT
AS
BEGIN
    UPDATE CartItems
    SET Quantity = @Quantity
    WHERE CartItemID = @CartItemID;
    
    RETURN @@ROWCOUNT; -- Returns number of rows affected
END;
GO

-- Stored Procedure to remove item from cart
CREATE PROCEDURE sp_RemoveFromCart
    @CartItemID INT
AS
BEGIN
    DELETE FROM CartItems 
    WHERE CartItemID = @CartItemID;
    
    RETURN @@ROWCOUNT; -- Returns number of rows affected
END;
GO

-- Stored Procedure to clear cart
CREATE PROCEDURE sp_ClearCart
    @CartID INT
AS
BEGIN
    DELETE FROM CartItems 
    WHERE CartID = @CartID;
    
    RETURN @@ROWCOUNT; -- Returns number of rows affected
END;
GO

-- Stored Procedure to get cart items with product details
CREATE PROCEDURE sp_GetCartItems
    @UserID INT
AS
BEGIN
    SELECT ci.CartItemID, ci.CartID, ci.ProductID, ci.Quantity,
           p.Name, p.Description, p.Price, p.ThumbnailURL,
           (p.Price * ci.Quantity) AS SubTotal
    FROM Carts c
    JOIN CartItems ci ON c.CartID = ci.CartID
    JOIN Products p ON ci.ProductID = p.ProductID
    WHERE c.UserID = @UserID;
END;
GO
